---
import '../styles/global.css';
import { ViewTransitions } from 'astro:transitions';
import Navigation from '../components/Navigation.astro';

interface Props {
  title: string;
  description?: string;
}

const { 
  title, 
  description = "Your default meta description"
} = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    <title>{title}</title>
    <ViewTransitions />
    <script>
      // Theme initialization and management
      const initializeTheme = () => {
        const theme = (() => {
          const storedTheme = localStorage.getItem('theme');
          if (typeof localStorage !== 'undefined' && storedTheme) {
            return storedTheme;
          }
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
          }
          return 'light';
        })();

        // Now theme is guaranteed to be either 'dark' or 'light'
        if (theme === 'dark') {
          document.documentElement.setAttribute('data-theme', 'dark');
        } else {
          document.documentElement.removeAttribute('data-theme');
        }

        localStorage.setItem('theme', theme);
      };

      // Run on initial page load
      initializeTheme();

      // Re-run on view transitions
      document.addEventListener('astro:after-swap', initializeTheme);
    </script>
  </head>
  <body>
    <header class="header">
      <div class="container header-content">
        <a href="/" class="logo">Jack Derksen</a>
        <div class="controls">
          <button 
            class="theme-toggle" 
            id="themeToggle" 
            aria-label="Toggle theme"
          >
            <span class="visually-hidden">Toggle theme</span>
            <svg 
              class="theme-icon" 
              width="24" 
              height="24" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              stroke-width="2" 
              stroke-linecap="round" 
              stroke-linejoin="round"
            >
              <circle cx="12" cy="12" r="5"/>
              <line x1="12" y1="1" x2="12" y2="3"/>
              <line x1="12" y1="21" x2="12" y2="23"/>
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
              <line x1="1" y1="12" x2="3" y2="12"/>
              <line x1="21" y1="12" x2="23" y2="12"/>
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
            </svg>
          </button>
          <button 
            class="menu-toggle" 
            id="menuToggle" 
            aria-label="Toggle menu"
            aria-expanded="false"
          >
            <span class="menu-icon">
              <span class="menu-line"></span>
              <span class="menu-line"></span>
              <span class="menu-line"></span>
            </span>
          </button>
        </div>
      </div>
    </header>

    <Navigation />

    <main class="main">
      <div class="container">
        <slot />
      </div>
    </main>

    <footer class="footer">
      <div class="container">
        <p>Â© {new Date().getFullYear()} Jack Derksen. All rights reserved.</p>
      </div>
    </footer>

    <script>
      // Initialize all interactive elements
      const initializeInteractiveElements = () => {
        // Theme toggle handler
        const themeToggle = document.getElementById('themeToggle');
        const handleThemeToggle = () => {
          const element = document.documentElement;
          const currentTheme = element.hasAttribute('data-theme') ? 'dark' : 'light';
          const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

          if (newTheme === 'dark') {
            element.setAttribute('data-theme', 'dark');
          } else {
            element.removeAttribute('data-theme');
          }

          localStorage.setItem('theme', newTheme);
        };

        // Remove old event listener if it exists
        themeToggle?.removeEventListener('click', handleThemeToggle);
        // Add new event listener
        themeToggle?.addEventListener('click', handleThemeToggle);

        // Menu handlers
        const menuToggle = document.getElementById('menuToggle');
        const navMenu = document.getElementById('navMenu');

        const handleMenuToggle = () => {
          const isExpanded = navMenu?.classList.toggle('active') ?? false;
          menuToggle?.setAttribute('aria-expanded', isExpanded.toString());
          navMenu?.setAttribute('aria-hidden', (!isExpanded).toString());
        };

        const handleClickOutside = (e: MouseEvent) => {
          if (e.target instanceof HTMLElement) {
            if (!e.target.closest('#navMenu') && !e.target.closest('#menuToggle')) {
              navMenu?.classList.remove('active');
              menuToggle?.setAttribute('aria-expanded', 'false');
              navMenu?.setAttribute('aria-hidden', 'true');
            }
          }
        };

        const handleEscape = (e: KeyboardEvent) => {
          if (e.key === 'Escape') {
            navMenu?.classList.remove('active');
            menuToggle?.setAttribute('aria-expanded', 'false');
            navMenu?.setAttribute('aria-hidden', 'true');
          }
        };

        // Remove old event listeners if they exist
        menuToggle?.removeEventListener('click', handleMenuToggle);
        document.removeEventListener('click', handleClickOutside);
        document.removeEventListener('keydown', handleEscape);

        // Add new event listeners
        menuToggle?.addEventListener('click', handleMenuToggle);
        document.addEventListener('click', handleClickOutside);
        document.addEventListener('keydown', handleEscape);
      };

      // Run on initial page load
      initializeInteractiveElements();

      // Re-run on view transitions
      document.addEventListener('astro:after-swap', initializeInteractiveElements);
    </script>
  </body>
</html>

<style>
  .header-content {
    height: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logo {
    font-size: var(--font-size-lg);
    font-weight: bold;
    color: var(--text-primary);
    text-decoration: none;
    transition: color var(--transition-fast);
  }

  .logo:hover {
    color: var(--accent-primary);
  }

  .controls {
    display: flex;
    gap: var(--space-sm);
  }

  .theme-toggle,
  .menu-toggle {
    padding: var(--space-xs);
    color: var(--text-primary);
    transition: color var(--transition-fast);
  }

  .theme-toggle:hover,
  .menu-toggle:hover {
    color: var(--accent-primary);
  }

  .theme-icon {
    transition: transform var(--transition-normal);
  }

  [data-theme="dark"] .theme-icon {
    transform: rotate(180deg);
  }

  /* Menu Toggle Button Styles */
  .menu-toggle {
    position: relative;
    width: 2rem;
    height: 2rem;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .menu-icon {
    position: relative;
    width: 1.5rem;
    height: 1.5rem;
  }

  .menu-line {
    position: absolute;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: currentColor;
    transition: transform var(--transition-normal),
                opacity var(--transition-normal);
  }

  .menu-line:nth-child(1) {
    top: 25%;
    transform-origin: center;
  }

  .menu-line:nth-child(2) {
    top: 50%;
    transform: translateY(-50%);
  }

  .menu-line:nth-child(3) {
    bottom: 25%;
    transform-origin: center;
  }

  .menu-toggle[aria-expanded="true"] .menu-line:nth-child(1) {
    transform: translateY(0.375rem) rotate(45deg);
  }

  .menu-toggle[aria-expanded="true"] .menu-line:nth-child(2) {
    opacity: 0;
  }

  .menu-toggle[aria-expanded="true"] .menu-line:nth-child(3) {
    transform: translateY(-0.375rem) rotate(-45deg);
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
